for colony.End.Quantity < colony.AntNum {
    // Store moves for the current turn
    firstSlice := []string{}
    madeMove := false // Track if any ant moves during this turn

    for i:=0; i < len(colony.Ants); i++{
		ant := colony.Ants[i]
        // If the ant is already at the end room, skip it
        if ant.CurrentPosition.Name == colony.End.Name {
            continue
        }

        // If the ant is at the start room, try to send it to the first room in its path

			if ant.CurrentPosition.Name == colony.Start.Name {
				move := colony.SendFromStart(ant)
				if move != "" {
					firstSlice = append(firstSlice, move)
					madeMove = true
				}
				continue
			}

        // Move the ant along its path if the next room is not occupied
        nextRoom := ant.CurrentPosition.Next
        if nextRoom != nil && !nextRoom.Occupied {
            // Mark the current room as unoccupied
            ant.CurrentPosition.Occupied = false

            // Move the ant to the next room
            ant.CurrentPosition = nextRoom
            if ant.CurrentPosition.Name != colony.End.Name {
                ant.CurrentPosition.Occupied = true
            }

            // Log the move
            firstSlice = append(firstSlice, fmt.Sprintf(logic.MovesPattern, ant.Name, ant.CurrentPosition.Name))
            madeMove = true

            // If the ant reaches the end room, update End.Quantity
            if nextRoom.Name == colony.End.Name {
                colony.End.Quantity++
            }
        }
    }

    // Add all moves from this turn to the global moves log
    if len(firstSlice) > 0 {
        logic.Moves = append(logic.Moves, firstSlice)
    }

    // If no moves were made and ants are still not at the end, exit to prevent infinite loop
    if !madeMove {
        fmt.Println("No moves possible this turn. Exiting to avoid infinite loop.")
        break
    }
}